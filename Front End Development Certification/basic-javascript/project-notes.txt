Arrays:
	.unshift()	add to start of array
	.push()		add to end of array
	.shift()	remove from start of array and store value
	.pop()		remove end of array and store value

Local Variables take precedence over Global Variables

If statement conditions can be considered boolean conditions.
	function ourTrueOrFalse(isItTrue) {
		if (isItTrue) { return "Yes, it's true"; } 
		return "No, it's false";
		}
	ourTrueOrFalse(true);

	The variable ourTrueOrFalse is set to true so when it is passed to the function it will trigger the return for "Yes, it's true".
	If statements just need to be true or false; so running a variable, set to true or false, through an if statment with the argument of just that variable 
		will determine the action based on the variable boolean value

In order for JavaScript to compare two different data types (for example, numbers and strings), it must convert one type to another. Once it does, however, it can compare terms as follows:
	1   ==  1    // true
	1   ==  2    // false
	1   == '1'   // true
	"3"  ==  3    // true

The strict equality (===) operator is similar to the equality operator (==) only the strict equality operator also compares the data type of the variables being compared.
	1 === 1 // true
	2 === '2' // false

the logical or operator (||) returns true if either of the operands is true, otherwise it returns false.

Random JavaScript examples I believe I learned from:
	-------------------------
	Stand in Line
	-------------------------
	Function takes two arguments, an array and a number. 
	Puts the number at the end of the array and removes the first element of the array and returns that value
	-------------------------
		function nextInLine(arr, item) {
		  // Your code here
		  arr.push(item);
		  item = arr.shift();
		  return item;  // Change this line
		}

		// Test Setup
		var testArr = [1,2,3,4,5];

		// Display Code
		console.log("Before: " + JSON.stringify(testArr));
		console.log(nextInLine(testArr, 6)); // Modify this line to test
		console.log("After: " + JSON.stringify(testArr));