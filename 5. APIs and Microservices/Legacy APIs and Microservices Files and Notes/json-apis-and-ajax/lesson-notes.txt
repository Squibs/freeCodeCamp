JSON APIs and Ajax
	
	Refresher - $(document).ready() runs once the page has finished loading.

	API - Application Programming Interfaces
		Most APIs transfer data in the JSON format
	JSON - JavaScript Object Notation
		Object properties and their current values; between {}
			Refered to as key-value pairs

	Currently what is being worked on in these lessons:

		<script>
		  $(document).ready(function() {
		    // Only change code below this line.
		    

		    // Only change code above this line.
		  });
		</script>


		<div class="container-fluid">
		  <div class = "row text-center">
		    <h2>Cat Photo Finder</h2>
		  </div>
		  <div class = "row text-center">
		    <div class = "col-xs-12 well message">
		      The message will go here
		    </div>
		  </div>
		  <div class = "row text-center">
		    <div class = "col-xs-12">
		      <button id = "getMessage" class = "btn btn-primary">
		        Get Message
		      </button>
		    </div>
		  </div>
		</div>

		Some examples that can be used in this particular function:

			Trigger Click Events with jQuery & Change Text with Click Events:
				$("#getMessage").on("click", function() { // acts as a listener for the get message button; listens for a click then does something
					$(".message").html("Here is the message"); // Changes the text of the message class that is in a well;
				}); 




			Get JSON with the jQuery getJSON Method:
				$.getJSON("/json/cats.json", function(json) { // retrieves the JSON from the cat photo API
					$(".message").html(JSON.stringify(json));  // stores the jason information in the message field
				})

					This is the retrieved JSON:
						[
							{"id":0,"imageLink":"https://s3.amazonaws.com/freecodecamp/funny-cat.jpg","altText":"A white cat wearing a green helmet shaped melon on it's head. ","codeNames":["Juggernaut","Mrs. Wallace","Buttercup"]},
							{"id":1,"imageLink":"https://s3.amazonaws.com/freecodecamp/grumpy-cat.jpg","altText":"A white cat with blue eys, looking very grumpy. ","codeNames":["Oscar","Scrooge","Tyrion"]},
							{"id":2,"imageLink":"https://s3.amazonaws.com/freecodecamp/mischievous-cat.jpg","altText":"A ginger cat with one eye closed and mouth in a grin-like expression. Looking very mischievous. ","codeNames":["The Doctor","Loki","Joker"]}
						]


							Looks like an array of three objects each with an id, image, alttext, and codenames

							Keys and their values make sense now:
								id is a key with avalue of 0;
								imageLink is a key with a value of "https://s3.amazonaws.com/freecodecamp/funny-cat.jpg"
								altText is a key with a value of "A white cat wearinga green helmet shaped melon on it's head."
								codenames is a key with a value of ["Juggernaut", "Mrs. Wallace", "Buttercup"]




			Convert JSON Data to HTML:
				$("#getMessage").on("click", function() {
					$.getJSON("/json/cats.json", function(json) { // get jason, location, function while retrieving, json as passed variable

						var html = ""; // will store retrieved information

						json.forEach(function(val) { // loop through our json adding to the above html variable
							var keys = Object.keys(val); // stores the current key based on current val (.forEach acting as loop, val acting as i) 
							html += "<div class = 'cat'>"; // adds the beginning div tag with class of cat

							keys.forEach(function(key) {
								html += "<strong>" + key + "</strong>: " + val[key] + "<br>"; // makes key name strong so it's bold; they adds the key value afterwards; then finally a break for formatting
							});

							html += "</div><br>"; // adds the end of the div and a break for formatting for the next div to start
						});

						$(".message").html(html); // stores all the information from the html variable created in .message
					});
				});

					.message now reads (minus html formatting & not exactly in this particular indentation): 

						id: 0
							imageLink: https://s3.amazonaws.com/freecodecamp/funny-cat.jpg
							altText: A white cat wearing a green helmet shaped melon on it's head. 
							codeNames: Juggernaut,Mrs. Wallace,Buttercup

						id: 1
							imageLink: https://s3.amazonaws.com/freecodecamp/grumpy-cat.jpg
							altText: A white cat with blue eys, looking very grumpy. 
							codeNames: Oscar,Scrooge,Tyrion

						id: 2
							imageLink: https://s3.amazonaws.com/freecodecamp/mischievous-cat.jpg
							altText: A ginger cat with one eye closed and mouth in a grin-like expression. Looking very mischievous. 
							codeNames: The Doctor,Loki,Joker


						The HTML would look like this (as an example for only the first cat, each subsequent cat would bin in their own div with class of 'cat'):

							<div class="col-xs-12 well message">
								<div class="cat">
									<strong>id</strong>
									": 0"
									<br>
									<strong>imageLink</strong>
									": https://s3.amazonaws.com/freecodecamp/funny-cat.jpg"
									<br>
									<strong>altText</strong>
									": A white cat wearing a green helmet shaped melon on it's head."
									<br>
									<strong>codeNames</strong>
									": Juggernaut,mrs.Wallace,Buttercup"
									<br>
								</div>
								<br>
							</div>




			Render Images from Data Sources:
				$(document).ready(function() {
					$("#getMessage").on("click"), function() {
						$.getJSON("/json/cats.json", function(json) {
							var html = "";

							json.forEach(function(val) {
								html += "<div class = 'cat'>";

								// Only change code below this line.

								html += "<img src = '" + val.imageLink + "' " + "alt='" + val.altText + "'>"; // stores the html to load the images and display them

								// Only change code above this line.

								html += "</div>";
							});

							$(".message").html(html);
						});
					});
				});

					HTML created with this (in the .message well div; looks like apostrophies are messed up in this example; This is only an example of the first image, the others would be here as well; they also have no formatting to them, so they are the original size... so the code would have to change to possible correct this, or the css could do it): 

						<div class="col-xs-12 well message">
							<div class="cat">
								<img src="https://s3.amazonaws.com/freecodecamp/funny-cat.jpg" alt="A white cat wearinga  green helmet shaped melon on it" s head. '>
							</div>
						</div>




		Prefilter JSON:
			$(document).ready(function() {

				$("#getMessage").on("click", function() {
					$.getJSON("/json/cats.json", function(json) {

						var html = "";

						// Only change code below this line.

							json = json.filter(function(val) { // create a filter for the json.forEach "loop"; so we don't render every image
								return (val.id !== 1); // only render images (look at code below; we're only rendering images) that do not have a id of 1 (so two images should render; id:0 and id:2)
							});

						// Only change code above this line.

						json.forEach(function(val) {

							html += "div class = 'cat'>";

							html += "<img src = '" + val.imageLink + "' " + "alt='" + val.altText + "'>";

							html += "</div>";
						});

						$(".message").html(html);
					});
				});
			});	




		Get Geolocation Data:
			<script>
			// Only change code below this line.
			  
				if (navigator.geolocation) {	// if available (probably will get prompt from browser) use built in browser navigator to get location
					navigator.geolocation.getCurrentPosition(function(position) { // get current position and do this function (pass this information as position variable)
						$("#data").html("latitude: " + position.coords.latitude + "<br>longitude: " + position.coords.longitude); // select the data id in the html to write the latitude and longitude information in html
					});
				}
			  
			// Only change code above this line.
			</script>

			<div id = "data">
				<h4>You are here:</h4>
			</div>